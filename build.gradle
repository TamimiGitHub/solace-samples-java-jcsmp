plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
}


// Don't need these task, so disabling them. Makes it possible to avoid
// declaring a single application main class.
startScripts.enabled = false
run.enabled = false

// Also don't need the regular application distribution packages since
// this is just a set of samples. So disabling to make the build output
// cleaner
distTar.enabled=false
distZip.enabled=false

applicationName = 'solace-samples-jcsmp'
//version = ''

jar {
    archiveBaseName = 'solace-samples-jcsmp'
    archiveVersion = ''
    manifest {
        attributes 'Implementation-Title': 'Solace JCSMP Getting Started Samples',
                   'Implementation-Version': ''
    }
}

// Download context sensitive help and/or source code for eclipse and idea
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
    jdt {
        //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // Solace Messaging API for Java Dependencies
    implementation group: 'com.solacesystems', name: 'sol-jcsmp', version: '10.9.0'
    // JSON API dependency
    testImplementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
}

// unused, so commenting out (Issue #58)
//task createAllStartScripts() << {
     // just a placeholder
//}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

def scripts = ['DirectHelloWorldPubSub':'com.solace.samples.DirectHelloWorldPubSub',
    'DirectProcessor':'com.solace.samples.DirectProcessor',
    'DirectPublisher':'com.solace.samples.DirectPublisher',
    'DirectReplier':'com.solace.samples.DirectReplier',
    'DirectRequestor':'com.solace.samples.DirectRequestor',
    'DirectSubscriber':'com.solace.samples.DirectSubscriber',
    'GuaranteedProcessor':'com.solace.samples.GuaranteedProcessor',
    'GuaranteedPublisher':'com.solace.samples.GuaranteedPublisher',
    'GuaranteedReplier':'com.solace.samples.GuaranteedReplier',
    'GuaranteedRequestor':'com.solace.samples.GuaranteedRequestor',
    'GuaranteedSubscriber':'com.solace.samples.GuaranteedSubscriber',
    'TransactedProcessor':'com.solace.samples.TransactedProcessor',
    'featureMessageSelectorsOnQueue':'com.solace.samples.features.MessageSelectorsOnQueue',
    'featureMessageTTLAndDeadMessageQueue':'com.solace.samples.features.MessageTTLAndDeadMessageQueue',
    'featureQueueProvisionAndBrowse':'com.solace.samples.features.QueueProvisionAndBrowse',
    'featureQueueProvisionAndRequestActiveFlowIndication':'com.solace.samples.features.QueueProvisionAndRequestActiveFlowIndication',
    'featureTransactions':'com.solace.samples.features.Transactions',
    'featureMessageReplay':'com.solace.samples.features.MessageReplay'
]
scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtimeClasspath
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    //createAllStartScripts.dependsOn(t)
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist
